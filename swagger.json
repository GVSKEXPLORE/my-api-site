// server.js
const express = require('express');
const cors = require('cors');
const swaggerUi = require('swagger-ui-express');
const swaggerDocument = require('./swagger.json');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Serve static frontend files
app.use(express.static(path.join(__dirname, 'public')));

// Swagger API docs
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Dummy Data
let employees = [
  { id: 1, name: "Alice Johnson", role: "Developer", department: "Engineering" },
  { id: 2, name: "Bob Smith", role: "Designer", department: "UX" },
  { id: 3, name: "Charlie Brown", role: "QA Tester", department: "Quality" },
  { id: 4, name: "Daisy Lee", role: "Product Manager", department: "Product" },
  { id: 5, name: "Ethan Kim", role: "HR Executive", department: "HR" }
];

let products = [
  { id: 1, name: "Laptop", price: 1200, category: "Electronics" },
  { id: 2, name: "Mouse", price: 25, category: "Accessories" },
  { id: 3, name: "Keyboard", price: 50, category: "Accessories" },
  { id: 4, name: "Monitor", price: 250, category: "Electronics" },
  { id: 5, name: "Desk Chair", price: 180, category: "Furniture" }
];

let assets = [
  { id: 1, type: "Laptop", brand: "Dell", serialNumber: "SN123", status: "Assigned", employeeId: 1 },
  { id: 2, type: "Mouse", brand: "Logitech", serialNumber: "SN456", status: "Available", employeeId: null },
  { id: 3, type: "Keyboard", brand: "HP", serialNumber: "SN789", status: "Assigned", employeeId: 2 }
];

let repairs = [
  { id: 1, employeeId: 1, assetId: 1, description: "Screen flickering", status: "Open", reportedAt: new Date() }
];

// Middleware to simulate auth
function authMiddleware(req, res, next) {
  const token = req.headers.authorization;
  if (token === 'Bearer fake-jwt-token') {
    next();
  } else {
    res.status(403).send('Unauthorized');
  }
}

// Homepage
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ===================== EMPLOYEE ROUTES =====================
app.get('/employees', (req, res) => {
  res.json(employees);
});

app.get('/employees/:id', (req, res) => {
  const emp = employees.find(e => e.id == req.params.id);
  emp ? res.json(emp) : res.status(404).send('Employee not found');
});

app.post('/employees', authMiddleware, (req, res) => {
  const emp = { id: employees.length + 1, ...req.body };
  employees.push(emp);
  res.status(201).json(emp);
});

app.put('/employees/:id', authMiddleware, (req, res) => {
  const index = employees.findIndex(e => e.id == req.params.id);
  if (index !== -1) {
    employees[index] = { id: Number(req.params.id), ...req.body };
    res.json(employees[index]);
  } else {
    res.status(404).send('Employee not found');
  }
});

app.delete('/employees/:id', authMiddleware, (req, res) => {
  employees = employees.filter(e => e.id != req.params.id);
  res.status(204).send();
});

app.get('/employees/:id/assets', (req, res) => {
  const assigned = assets.filter(a => a.employeeId == req.params.id);
  res.json(assigned);
});

app.get('/employees/:id/repairs', (req, res) => {
  const employeeRepairs = repairs.filter(r => r.employeeId == req.params.id);
  res.json(employeeRepairs);
});

// ===================== PRODUCT ROUTES =====================
app.get('/products', (req, res) => {
  res.json(products);
});

app.get('/products/:id', (req, res) => {
  const product = products.find(p => p.id == req.params.id);
  product ? res.json(product) : res.status(404).send('Product not found');
});

app.post('/products', authMiddleware, (req, res) => {
  const product = { id: products.length + 1, ...req.body };
  products.push(product);
  res.status(201).json(product);
});

app.put('/products/:id', authMiddleware, (req, res) => {
  const index = products.findIndex(p => p.id == req.params.id);
  if (index !== -1) {
    products[index] = { id: Number(req.params.id), ...req.body };
    res.json(products[index]);
  } else {
    res.status(404).send('Product not found');
  }
});

app.delete('/products/:id', authMiddleware, (req, res) => {
  products = products.filter(p => p.id != req.params.id);
  res.status(204).send();
});

// ===================== ASSET ROUTES =====================
app.get('/assets', (req, res) => {
  res.json(assets);
});

app.post('/assets', authMiddleware, (req, res) => {
  const asset = { id: assets.length + 1, status: "Available", employeeId: null, ...req.body };
  assets.push(asset);
  res.status(201).json(asset);
});

app.put('/assets/:id', authMiddleware, (req, res) => {
  const index = assets.findIndex(a => a.id == req.params.id);
  if (index !== -1) {
    assets[index] = { ...assets[index], ...req.body };
    res.json(assets[index]);
  } else {
    res.status(404).send('Asset not found');
  }
});

app.post('/assets/:id/assign', authMiddleware, (req, res) => {
  const index = assets.findIndex(a => a.id == req.params.id);
  if (index !== -1) {
    assets[index].employeeId = req.body.employeeId;
    assets[index].status = "Assigned";
    res.json(assets[index]);
  } else {
    res.status(404).send('Asset not found');
  }
});

app.post('/assets/:id/unassign', authMiddleware, (req, res) => {
  const index = assets.findIndex(a => a.id == req.params.id);
  if (index !== -1) {
    assets[index].employeeId = null;
    assets[index].status = "Available";
    res.json(assets[index]);
  } else {
    res.status(404).send('Asset not found');
  }
});

// ===================== REPAIR ROUTES =====================
app.get('/repairs', (req, res) => {
  res.json(repairs);
});

app.post('/repairs', authMiddleware, (req, res) => {
  const repair = { id: repairs.length + 1, reportedAt: new Date(), ...req.body };
  repairs.push(repair);
  res.status(201).json(repair);
});

app.put('/repairs/:id', authMiddleware, (req, res) => {
  const index = repairs.findIndex(r => r.id == req.params.id);
  if (index !== -1) {
    repairs[index] = { ...repairs[index], ...req.body };
    res.json(repairs[index]);
  } else {
    res.status(404).send('Repair request not found');
  }
});

app.get('/repairs/:id', (req, res) => {
  const repair = repairs.find(r => r.id == req.params.id);
  repair ? res.json(repair) : res.status(404).send('Repair not found');
});

app.delete('/repairs/:id', authMiddleware, (req, res) => {
  repairs = repairs.filter(r => r.id != req.params.id);
  res.status(204).send();
});

// ===================== EXTRA MOCK ROUTES =====================
app.get('/status', (req, res) => {
  res.json({ status: 'API is running smoothly ðŸš€' });
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  if (username === 'admin' && password === 'password') {
    res.json({ token: 'fake-jwt-token' });
  } else {
    res.status(401).send('Invalid credentials');
  }
});

app.post('/register', (req, res) => {
  const { username, password } = req.body;
  res.status(201).json({ message: `User ${username} registered successfully.` });
});

// Start server
app.listen(PORT, () => {
  console.log(`API running at http://localhost:${PORT}`);
});
